// Code generated by MockGen. DO NOT EDIT.
// Source: internal/apiserver/apiserver.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	chunkmanager "simple-storage/internal/chunkmanager"

	gomock "github.com/golang/mock/gomock"
)

// MockChunkManager is a mock of ChunkManager interface.
type MockChunkManager struct {
	ctrl     *gomock.Controller
	recorder *MockChunkManagerMockRecorder
}

// MockChunkManagerMockRecorder is the mock recorder for MockChunkManager.
type MockChunkManagerMockRecorder struct {
	mock *MockChunkManager
}

// NewMockChunkManager creates a new mock instance.
func NewMockChunkManager(ctrl *gomock.Controller) *MockChunkManager {
	mock := &MockChunkManager{ctrl: ctrl}
	mock.recorder = &MockChunkManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChunkManager) EXPECT() *MockChunkManagerMockRecorder {
	return m.recorder
}

// ChunksInfo mocks base method.
func (m *MockChunkManager) ChunksInfo(filename string) ([]chunkmanager.Chunk, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChunksInfo", filename)
	ret0, _ := ret[0].([]chunkmanager.Chunk)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChunksInfo indicates an expected call of ChunksInfo.
func (mr *MockChunkManagerMockRecorder) ChunksInfo(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChunksInfo", reflect.TypeOf((*MockChunkManager)(nil).ChunksInfo), filename)
}

// SplitIntoChunks mocks base method.
func (m *MockChunkManager) SplitIntoChunks(filename string, size int) ([]chunkmanager.Chunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SplitIntoChunks", filename, size)
	ret0, _ := ret[0].([]chunkmanager.Chunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SplitIntoChunks indicates an expected call of SplitIntoChunks.
func (mr *MockChunkManagerMockRecorder) SplitIntoChunks(filename, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SplitIntoChunks", reflect.TypeOf((*MockChunkManager)(nil).SplitIntoChunks), filename, size)
}

// MockStorageServer is a mock of StorageServer interface.
type MockStorageServer struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServerMockRecorder
}

// MockStorageServerMockRecorder is the mock recorder for MockStorageServer.
type MockStorageServerMockRecorder struct {
	mock *MockStorageServer
}

// NewMockStorageServer creates a new mock instance.
func NewMockStorageServer(ctrl *gomock.Controller) *MockStorageServer {
	mock := &MockStorageServer{ctrl: ctrl}
	mock.recorder = &MockStorageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageServer) EXPECT() *MockStorageServerMockRecorder {
	return m.recorder
}

// DownloadChunk mocks base method.
func (m *MockStorageServer) DownloadChunk(chunkID string, buf []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadChunk", chunkID, buf)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadChunk indicates an expected call of DownloadChunk.
func (mr *MockStorageServerMockRecorder) DownloadChunk(chunkID, buf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadChunk", reflect.TypeOf((*MockStorageServer)(nil).DownloadChunk), chunkID, buf)
}

// UploadChunk mocks base method.
func (m *MockStorageServer) UploadChunk(chunkID string, buf []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadChunk", chunkID, buf)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadChunk indicates an expected call of UploadChunk.
func (mr *MockStorageServerMockRecorder) UploadChunk(chunkID, buf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadChunk", reflect.TypeOf((*MockStorageServer)(nil).UploadChunk), chunkID, buf)
}
